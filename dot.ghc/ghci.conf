-- -*- haskell -*-
-- Colorizing GHCi prompt

-- generated with 
--   echo -e :set prompt '"\033[32;1m%s\033[34;1m>\033[0m "' > ~/.ghc/ghci.conf
-- see
--   http://en.wikipedia.org/wiki/ANSI_escape_code--Colors
-- for color info, and
-- - http://martijn.van.steenbergen.nl/journal/2010/02/27/colors-in-ghci/
-- - http://www.haskell.org/haskellwiki/GHCi_in_colour
-- for ways to color other parts of ghci output (but not the prompt :P)
--
-- the color escapes screw up GHCi's idea of where the prompt ends.
-- this is the "non-printable character" problem in bash and zsh,
-- which is solved there by \[...\] and %{...%}, respectively.
-- Neither of those work in GHCi, but simply putting the prompt on a
-- different line than the colors works.
--
-- however, emacs's haskellm-mode is still confused by the two line
-- prompt, but disabling the custom prompt with
--
--   (setq haskell-program-name "ghci -ignore-dot-ghci")
--
-- works.

:set prompt "[32;1m%s[0m\n> "

-- Get ready for debugging.
let __nc_debug__ _ = return ":set -fbreak-on-error \n :m + Data.List"
:def nc:debug __nc_debug__

-- A more friendly version of ":forward" and ":back": takes a "how
-- far" argument, and does ":history" and ":list" after moving.
:{
let __nc_move__ s = do
      let n = read s
          cmd = if n > 0 then ":forward" else ":back"
      return $ Data.List.intercalate "\n" 
             $ replicate (abs n) cmd ++ [":history",":list"]
:}
:def nc:move __nc_move__

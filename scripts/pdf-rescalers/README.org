See also: output of `nc:pdf:tutorial`.
* pdfnup (from pdfjam package): variable trim + nup

usage examples:
: ./pdfnup --paper letterpaper --trim "3cm 5cm 4.5cm 3.5cm" <file>
: ./pdfnup --paper letterpaper --trim "3.5cm 3.5cm 3.5cm 3.5cm" <file>
: ./pdfnup --nup 1x1 --paper letterpaper \
:   --trim "1.5cm 3cm 1.5cm 0cm" <file>

the --trim options are <left> <bottom> <right> <top> and the program
seems to be "smart" in that it doesn't necessarily honor your
request :P
* pdfrescale (from a CMU student): scale based uniform trim
doesn't seem to like relative paths to target file, but relative path
to script is ok.

usage examples:
: ~/v/cpdt-reading-course.redmine.git/pdf-rescalers/pdfrescale outsidein-x-v3 1.3

there are many more options, such as --delta, that i have not used
* watermarking to avoid guessing
Work flow:

1. use `pdfinfo` (from poppler-utils package) to determine paper size
   of the to-be-cropped pdf:

     pdfinfo in.pdf

2. apply the watermark with `pdftk`:

     pdftk in.pdf background watermark-<paper size from step 1>.pdf output /tmp/in.wm.pdf

3. figure out padding distances by looking at watermarked pdf:

     evince /tmp/in.wm.pdf

   the watermark lines are in .5cm increments (black lines at 1cm
   increments).

4. use ./pdfnup to trim and nup:

     pdfnup --paper letterpaper \
            --nup 2x1 \
            --trim <left> <bottom> <right> <top> \
            --delta <horizontal> <vertical> \
            in.pdf

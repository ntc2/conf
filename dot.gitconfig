# -*- conf -*-
#
# Best git tutorial I've read:
# http://newartisans.com/2008/04/git-from-the-bottom-up/
# http://ftp.newartisans.com/pub/git.from.bottom.up.pdf
[user]
	name = Nathan Collins
	email = nathan.collins@gmail.com
[apply]
	whitespace = fix
[core]
  # Apparently git sets 'LESS=FRSX'. The 'F' means to quit if output
  # fits on one screen, the 'R' means to interpret escapes (e.g. ANSI
  # color), the 'S' means to chop long lines, and the 'X' means not to
  # clear the screen after leaving 'less'.  Below, the 'M' means to
  # show a detailed status line, and the 'i' means to ignore case in
  # searches. The '+Gg' means read the whole file (so that the
  # percentage can be computed).
  #
  # See http://stackoverflow.com/a/19871578/470844.
  #
  #pager = less -Mi +Gg
  #
  # Turns out that is annoying for short output: the whole screen gets
  # filled with tildes (using '--tilde' makes them disappear, but the
  # whole screen is still full).
  #
  # Unrelated: because my prompt is multiple lines (usually 2; 3 when
  # in a repo), the trick where 'less' exits if the output fits on one
  # screen does not work correctly.  Looking at 'man less', I would
  # think that setting 'LINES' would help, but it does not. The man
  # page mentions that 'TIOCGWINSZ' or 'WIOCGETD' take precedence if
  # supported (no idea what these are), so that must be the problem.
  # 
  # This Stack Exchange question is helpful:
  # http://unix.stackexchange.com/questions/93173/how-does-less-know-the-terminal-resolution
  #
  # Using 'stty rows <n>' to set the number of rows to 'n' caused
  # other problems.
  #
  # So just disable '-F' and have to hit 'q' a little more often.
  #
  # The good solution is probably to use a simple preprocessor that
  # only invokes 'less' if the output is longer than the specified
  # number of lines. The "specified number of lines" can then be
  # calculated based on the size of the prompt.  After all, changing
  # the terminal height setting to an incorrect value confuses less
  # with good reason.  As a bonus, using this preprocessor would mean
  # that the tilde problem when using '+Gg' described above would also
  # go away.
  pager =  less -Mi -+F
    # Line ending normalization: see
    # http://timclem.wordpress.com/2012/03/01/mind-the-end-of-your-line/
    #
    # Apparently git-svn is buggy when it comes to
    # svn:eol-style=native: git does not perform any translation in
    # the working copy when this attribute is set, and doesn't convert
    # line endings to LF before committing when this attribute is set.
    # Together, these mean that you can git-svn commit a file with
    # CRLF line endings, while setting the svn:eol-style=native
    # attribute via ~/.subversion/config (which git-svn honors),
    # without actually changing the CRLF to LF in the committed file.
    # The end result is that the subversion repo will store the file
    # with CRLF line endings, even though svn:eol-style=native is
    # supposed to mean that the file is stored with native line
    # endings (since setting this attribute in a subversion working
    # copy automatically causes the files line endings to be
    # converted).  When you check the file out in git again, git will
    # leave the CRLF line endings in tact :P And maybe worse,
    # subversion will convert them on checkout, but then any edits
    # will result in the full file being marked as changed :P
    #
    # I didn't find any nice
    # make-git-do-the-subversion-style-conversion solution, but by
    # setting autorclf = input and safecrlf = warn (warn might be the
    # default), you can have git convert CRLF to LF *before*
    # committing, and warn you about it.  This doesn't help with
    # already screwed up files, but it will hopefully stop me from
    # accidentally committing CRLF files in the future.
    #
    # The 'eol' setting controls what line endings you get in the
    # working copy, but the default value of 'native' doesn't help
    # with the above problem, and changing it to 'lf' to force LF
    # marks all files with CRLF as modified :P

    # Solution: see http://stackoverflow.com/a/10762396/470844

    # Subsumed by ~/.gitattributes.
    #
    # autocrlf = input

    # Warn when line endings are converted. Default?
    safecrlf = warn

    # Convert files with the 'text' attribute to native line endings
    # on checkout (Default).
    #
    # eol = native

    # File containing global git attributes.  See 'git help
    # attributes'.  I'm setting '* text=auto' there, which subsumes
    # 'core.autocrlf=input'.
    #
    # To override this in a repo that already has files with messed up
    # line endings, create a .gitattributes in the repo with contents
    #
    #   * text=unspecified
    attributesfile = ~/.gitattributes

    # Turn this on temporarily if git(-svn) gets confused by an
    # symlink that is actually a file.  Then commit the file.  Then
    # turn this off again and commit the file again, which registers a
    # "typechange".
    #
    #symlinks = false

    # I can't figure out how to stop emacs's vc-git from setting
    # fundamental-mode and ruining flyspell ... so, i added
    # fundamental-mode to my auto flyspell-mode modes, in
    # extensions/flyspell.el.
    #
    # UPDATE: now git has also learned to set default-generic-mode in
    # some cases ??? So, updated auto flyspell-mode modes to include
    # that ... this is obviously the wrong approach :P
    #
    # editor = emacs -nw -f text-mode
    # editor = emacs -nw --eval '(setq nc:use-flyspell nil)' -f flyspell-mode
[color]
	ui = auto
[log]
    # Show times in my time zone.
    #
    # This triggers a bug in `git stash list`: the stashes receive
    # relative dates instead of numbers (e.g. 'starch@{0}' for the
    # first stash).  The bug is fixed here (gmane git list: git stash
    # list shows timestamp in stead of "stash number", when setting
    # date = local for log in config, 2009 September 15):
    #
    #   http://thread.gmane.org/gmane.comp.version-control.git/128569
    #
    # and then later reintroduced, which is discussed here (magit
    # list: Bug in git-stash(.sh) ?, 2012 April 27):
    #
    #   https://groups.google.com/forum/?fromgroups#!topic/magit/KpJtJ956D3Y
    #
    # So, looks like it's been fixed recently, but is not in stable
    # gits on ubuntu :P
    #date = local
    date = relative
[grep]
    extendedRegexp = true
[merge]
    # Fancier setup at http://emacswiki.org/emacs/EmergeDiff
    tool = emerge
    # Make 'git fetch; git merge' behave like 'git pull' on the
    # current branch.
    defaultToUpstream = true

# Git !-aliases are run with current dir set to `git rev-parse
# --show-toplevel`, with the variable 'GIT_PREFIX' set to `git
# rev-parse --show-prefix`.
[alias]
    aliases = !git config --get-regexp alias

    ######################################################################
    # Clean up whitespace.
    #
    # See
    # http://stackoverflow.com/questions/591923/make-git-automatically-remove-trailing-whitespace-before-committing/15398512#15398512
    ######################################################################

    # Fix whitespace in the index while preserving a dirty tree, if
    # any.
    #
    # Assuming your index is empty, some useful variations are: 
    #
    # - fix whitespace in all changes in all versioned files:
    #
    #     git add -u :/ && git fixws && git reset
    #
    # - fix whitespace in all unversioned files and in all changes in
    #   all versioned files:
    #
    #     git add --all :/ && git fixws && git reset
    #
    # The 'git stash save' fails if the tree is clean (instead of
    # creating an empty stash :P), so we need to consider the case of
    # a clean tree separately.
    #
    # The if-statements:
    # - if index is dirty
    #   - if tree is dirty
    #
    # The complicated sequencing in the first branch (dirty tree):
    # hide the index while fixing the tree, and then hide the tree
    # while fixing the index.
    fixws =!"\
      if (! git diff-index --quiet --cached HEAD); then \
        cd `git rev-parse --show-toplevel` && \
        export GIT_EDITOR=: && \
        if (! git diff-files --quiet .) ; then \
          git commit --allow-empty -m FIXWS_SAVE_INDEX && \
          git stash save FIXWS_SAVE_TREE && \
          git reset 'HEAD^' && \
          git -c apply.whitespace=fix add -ue . && \
          git checkout . && \
          git stash pop ; \
        else \
          git reset && \
          git -c apply.whitespace=fix add -ue . && \
          git checkout . ; \
        fi ; \
      fi"

    # Fix whitespace in local-tree files (sub-tree rooted at current
    # dir). Fail gracefully if the index is dirty.
    #
    # The if-statements:
    # - if index is clean
    #   - if tree is dirty
    fixws-local-tree =!"\
      cd \"$GIT_PREFIX\" && \
      if git diff-index --quiet --cached HEAD ; then \
        if ! git diff-files --quiet . ; then \
          export GIT_EDITOR=: && \
          git -c apply.whitespace=fix add -ue . && \
          git checkout . && \
          git reset ; \
        fi ; \
      else \
        echo 'Your index is dirty! Bailing ...' >&2 && exit 1 ; \
      fi"

    # Fix whitespace in indexed files. Fail gracefully if the tree is
    # dirty.
    #
    # We 'cd' to the top-level so that commands are relative the whole
    # tree.
    #
    # The if-statements:
    # - if tree is clean
    #   - if index is dirty
    fixws-index =!"\
      cd `git rev-parse --show-toplevel` && \
      if git diff-files --quiet . ; then \
        if ! git diff-index --quiet --cached HEAD ; then \
          export GIT_EDITOR=: && \
          git reset && \
          git -c apply.whitespace=fix add -ue . && \
          git checkout . ; \
        fi ; \
      else \
        echo 'Your tree is dirty! Bailing ...' >&2 && exit 1 ; \
      fi"

    # Fix whitespace in the index and the local tree (sub-tree rooted
    # at current dir).
    #
    # The complicated sequencing in the first branch: hide the index
    # while fixing the tree, and then hide the tree while fixing the
    # index.  The 'git stash' is necessary if there are any
    # non-indexed changes (not just in the current sub-tree, hence the
    # `git rev-parse --show-toplevel`), but fails to create a stash if
    # there are no non-indexed changes.
    #
    # Can't use 'git stash --keep-index' to save the tree first and
    # avoid the 'git commit', since 'git stash' still stashes the
    # indexed changes in this case, and so fixing whitespace errors in
    # the index causes a conflict on 'git stash pop'.
    fixws-local-tree-and-index =!"\
      cd \"$GIT_PREFIX\" && \
      if (! git diff-files --quiet `git rev-parse --show-toplevel`) && \
         (! git diff-index --quiet --cached HEAD) ; then \
        git commit --allow-empty -m FIXWS_SAVE_INDEX && \
        git fixws-local-tree && \
        git stash save FIXWS_SAVE_TREE && \
        git reset --soft 'HEAD^' && \
        git fixws-index && \
        git stash pop ; \
      elif (! git diff-files --quiet .) ; then \
        git fixws-local-tree ; \
      elif (! git diff-index --quiet --cached HEAD) ; then \
        git fixws-index ; \
      fi"

      # This simpler version does not work because 'git stash save'
      # does not create a stash when the tree is clean. In that case,
      # the final 'git stash pop' does not do the right thing!
      #
      # git commit --allow-empty -m FIXWS_SAVE_INDEX && \
      # git fixws-tree && \
      # git stash save FIXWS_SAVE_TREE && \
      # git reset --soft 'HEAD^' && \
      # git fixws-index && \
      # git stash pop

    # Fix whitespace in the index and the tree.
    fixws-global-tree-and-index =!git fixws-local-tree-and-index

    ######################################################################

    # Work around 'log.date = local' bug discussed above.
    stashlist = !git stash list --date=default

    # SVN style short aliases.
    #
    # from https://git.wiki.kernel.org/index.php/Aliases
    st = status
    ci = commit --verbose
    br = branch
    co = checkout
    di = diff
    # lgs -p
    lgp = log --stat -p
    lgs = log --stat
    who = shortlog -s --

    # On newer gits, --oneline abbreviates --pretty=oneline
    # --abbrev-commit.  To get more verbose commit info, append
    # --pretty=short or similar
    #
    # grOneline = log --graph --all --pretty='format:%h %C(yellow)%ar%Creset %Cgreen%aN%Creset%C(yellow)%d%Creset %s'

    # This version uses only one line per commit, and includes only
    # the commit hash, the subject, and the refs.  The refs are added
    # with '--decorate', which does a much better job than '%d' used
    # below: different colors for different kinds of refs (HEAD vs
    # branches tags), and prefixes tags with 'tag: '.
    grShort = log --graph --pretty=oneline --decorate --abbrev-commit
    # The rest are based on http://stackoverflow.com/a/9074343/470844
    grTwoLines = log --graph --format=format:'%C(red)%h%C(reset) %C(green)(%cr)%C(reset)%C(bold yellow)%d%C(reset) %C(yellow)%an%C(reset)%n''%C(white)%s%C(reset)' --abbrev-commit
    # All entries have an extra newline here :P Using '%+b' to avoid
    # two extra newlines when body is empty though.
    grFull = log --graph --format=format:'%C(red)%h%C(reset) %C(green)(%cr)%C(reset)%C(bold yellow)%d%C(reset) %C(yellow)%an%C(reset)%n''%C(white)%s%C(reset)%n%+b' --abbrev-commit
    # Seems like a bug: git will only accept underline versions of the
    # above aliases.  Also, aliases break zsh completion.
    gr         = !git grtwolines --all
    grTopology = !git grtwolines --all --simplify-by-decoration
[push]
    # Make `git push` only push the current branch, and only if it has
    # matching name upstream branch.
    default = simple
[diff]
    # Helpful if you don't know which file is which.
    #mnemonicprefix = true
    # Helpful if you want to double click copy a file name.
    noprefix = true

# -*- conf -*-
#
# Best git tutorial I've read:
# http://newartisans.com/2008/04/git-from-the-bottom-up/
# http://ftp.newartisans.com/pub/git.from.bottom.up.pdf
[core]
    # Line ending normalization: see
    # http://timclem.wordpress.com/2012/03/01/mind-the-end-of-your-line/
    #
    # Apparently git-svn is buggy when it comes to
    # svn:eol-style=native: git does not perform any translation in
    # the working copy when this attribute is set, and doesn't convert
    # line endings to LF before committing when this attribute is set.
    # Together, these mean that you can git-svn commit a file with
    # CRLF line endings, while setting the svn:eol-style=native
    # attribute via ~/.subversion/config (which git-svn honors),
    # without actually changing the CRLF to LF in the committed file.
    # The end result is that the subversion repo will store the file
    # with CRLF line endings, even though svn:eol-style=native is
    # supposed to mean that the file is stored with native line
    # endings (since setting this attribute in a subversion working
    # copy automatically causes the files line endings to be
    # converted).  When you check the file out in git again, git will
    # leave the CRLF line endings in tact :P And maybe worse,
    # subversion will convert them on checkout, but then any edits
    # will result in the full file being marked as changed :P
    #
    # I didn't find any nice
    # make-git-do-the-subversion-style-conversion solution, but by
    # setting autorclf = input and safecrlf = warn (warn might be the
    # default), you can have git convert CRLF to LF *before*
    # committing, and warn you about it.  This doesn't help with
    # already screwed up files, but it will hopefully stop me from
    # accidentally committing CRLF files in the future.
    #
    # The 'eol' setting controls what line endings you get in the
    # working copy, but the default value of 'native' doesn't help
    # with the above problem, and changing it to 'lf' to force LF
    # marks all files with CRLF as modified :P

    # Solution: see http://stackoverflow.com/a/10762396/470844

    # Subsumed by ~/.gitattributes.
    #
    # autocrlf = input

    # Warn when line endings are converted. Default?
    safecrlf = warn

    # Convert files with the 'text' attribute to native line endings
    # on checkout (Default).
    #
    # eol = native

    # File containing global git attributes.  See 'git help
    # attributes'.  I'm setting '* text=auto' there, which subsumes
    # 'core.autocrlf=input'.
	attributesfile = ~/.gitattributes

    # Turn this on temporarily if git(-svn) gets confused by an
    # symlink that is actually a file.  Then commit the file.  Then
    # turn this off again and commit the file again, which registers a
    # "typechange".
    #
    #symlinks = false

    # I can't figure out how to stop emacs's vc-git from setting
    # fundamental-mode and ruining flyspell ... so, i added
    # fundamental-mode to my auto flyspell-mode modes, in
    # extensions/flyspell.el.
    #
    # editor = emacs -nw -f text-mode
    # editor = emacs -nw --eval '(setq nc:use-flyspell nil)' -f flyspell-mode
[user]
	name = Nathan Collins
	email = nathan.collins@gmail.com
[color]
	ui = auto
[log]
    # Show times in my time zone.
    date = local
# from https://git.wiki.kernel.org/index.php/Aliases
[alias]
    st = status
    ci = commit
    br = branch
    co = checkout
    di = diff
    # lgs -p
    lgp = log --stat -p
    lgs = log --stat
    who = shortlog -s --

    # On newer gits, --oneline abbreviates --pretty=oneline
    # --abbrev-commit.  To get more verbose commit info, append
    # --pretty=short or similar
    #
    # grOneline = log --graph --all --pretty='format:%h %C(yellow)%ar%Creset %Cgreen%aN%Creset%C(yellow)%d%Creset %s'

    # This version uses only one line per commit, and includes only
    # the commit hash, the subject, and the refs.  The refs are added
    # with '--decorate', which does a much better job than '%d' used
    # below: different colors for different kinds of refs (HEAD vs
    # branches tags), and prefixes tags with 'tag: '.
    grShort = log --graph --all --pretty=oneline --decorate --abbrev-commit
    # The rest are based on http://stackoverflow.com/a/9074343/470844
    grTwoLines = log --graph --all --format=format:'%C(red)%h%C(reset) %C(green)(%cr)%C(reset)%C(bold yellow)%d%C(reset) %C(yellow)%cn%C(reset)%n''%C(white)%s%C(reset)' --abbrev-commit
    # All entries have an extra newline here :P Using '%+b' to avoid
    # two extra newlines when body is empty though.
    grFull = log --graph --all --format=format:'%C(red)%h%C(reset) %C(green)(%cr)%C(reset)%C(bold yellow)%d%C(reset) %C(yellow)%cn%C(reset)%n''%C(white)%s%C(reset)%n%+b' --abbrev-commit
    # Seems like a bug: git will only accept underline versions of the
    # above aliases.  Also, aliases break zsh completion.
    gr         = !git grtwolines
    grTopology = !git grtwolines --simplify-by-decoration
